# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="robbyrussell"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

export PATH="/Users/shohei/.nodebrew/current/bin:/Applications/Tex/TeXShop.app/Contents/Resources/TeXShop/bin/tslatexmk:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/bin:/Users/shohei/.rbenv/bin:/usr/local/bin:/usr/local/cuda/bin:/usr/local/bin/dex2jar:/Users/shohei/YAGARTO/bin:/Users/shohei/Documents/Android/sdk/tools:/Users/shohei/.opam/system/bin:/usr/local/sbin:/Users/shohei/pebble-dev/PebbleSDK-2.0-BETA3/bin:/Users/shohei/.rbenv/shims:/Users/shohei/.rbenv/bin:/Users/shohei/perl5/perlbrew/bin:/Users/shohei/perl5/perlbrew/perls/perl-5.19.1/bin:/usr/local/heroku/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/CrossPack-AVR/bin:/usr/texbin:/Applications/HI-TECH/picc/9.83/bin:/Users/shohei/sh:/Users/shohei/Documents/Android/sdk/platform-tools:/opt/X11/bin:/usr/local/CrossPack-AVR/bin:/opt/local/bin:/Users/shohei/depot_tools"
# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

export EDITOR='vim'
# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
#
export LANG=ja_JP.UTF-8
#LANG=en_US.UTF-8

alias gc=/usr/local/bin/gc
export gitsuccess=1

alias gp="git push && afplay /System/Library/Sounds/Glass.aiff" 
alias airport=/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport

export XMODIFIERS=@im=uim
export GTK_IM_MODULE=uim
alias R=/Library/Frameworks/R.framework/Resources/R

export MYSQLPASS=`cat ~/.mysql_password | sed -e 's/^.*=//g'`

alias marked2="/Applications/Marked\ 2.app/Contents/MacOS/Marked\ 2"

alias main="vim ~/Dropbox/Thesis/src/main.tex"
alias chap1="vim ~/Dropbox/Thesis/src/chap1.tex"
alias intro="vim ~/Dropbox/Thesis/src/chap1.tex"
alias chap2="vim ~/Dropbox/Thesis/src/chap2.tex"
alias related="vim ~/Dropbox/Thesis/src/chap2.tex"
alias chap3="vim ~/Dropbox/Thesis/src/chap3.tex"
alias requirements="vim ~/Dropbox/Thesis/src/chap3.tex"
alias chap4="vim ~/Dropbox/Thesis/src/chap4.tex"
alias framework="vim ~/Dropbox/Thesis/src/chap4.tex"
alias chap5="vim ~/Dropbox/Thesis/src/chap5.tex"
alias system="vim ~/Dropbox/Thesis/src/chap5.tex"
alias chap6="vim ~/Dropbox/Thesis/src/chap6.tex"
alias exp="vim ~/Dropbox/Thesis/src/chap6.tex"
alias chap7="vim ~/Dropbox/Thesis/src/chap7.tex"
alias result="vim ~/Dropbox/Thesis/src/chap7.tex"
alias chap8="vim ~/Dropbox/Thesis/src/chap8.tex"
alias evaluation="vim ~/Dropbox/Thesis/src/chap8.tex"
alias chap9="vim ~/Dropbox/Thesis/src/chap9.tex"
alias conclusion="vim ~/Dropbox/Thesis/src/chap9.tex"


alias words="/Users/shohei/Dropbox/Thesis/tools/words.sh"
export PKG_CONFIG_PATH="/opt/X11/lib/pkgconfig:/usr/local/lib/pkgconfig/"

# Add GHC 7.8.3 to the PATH, via http://ghcformacosx.github.io/
export GHC_DOT_APP="/Applications/ghc-7.8.3.app"
if [ -d "$GHC_DOT_APP" ]; then
    # export PATH="${HOME}/.cabal/bin:${GHC_DOT_APP}/Contents/bin:${PATH}"
    export PATH="${HOME}/.cabal/bin:${GHC_DOT_APP}/Contents/bin:${PATH}"
fi



alias q='qlmanage -p "$@" >& /dev/null'

export LESS='-NR'
export LESSOPEN='| /usr/local/bin/src-hilite-lesspipe.sh %s'


export MANPAGER='less -R'
man() {
	env \
		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
		LESS_TERMCAP_md=$(printf "\e[1;31m") \
		LESS_TERMCAP_me=$(printf "\e[0m") \
		LESS_TERMCAP_se=$(printf "\e[0m") \
		LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
		LESS_TERMCAP_ue=$(printf "\e[0m") \
		LESS_TERMCAP_us=$(printf "\e[1;32m") \
		man "$@"
}

alias inkscape="/Applications/Inkscape.app/Contents/Resources/bin/inkscape"


path_append ()  { path_remove $1; export PATH="$PATH:$1"; }
path_prepend () { path_remove $1; export PATH="$1:$PATH"; }
path_remove ()  { export PATH=`echo -n $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`; }

export NODEBREW_ROOT=$HOME/.nodebrew
export NODE_PATH=$HOME/.nodebrew/current/lib/node_modules


export PATH=/Users/shohei/emsdk_portable:$PATH
# export PATH=/Users/shohei/emsdk_portable/clang/e1.27.0_64bit:$PATH
# export PATH=/Users/shohei/emsdk_portable/node/0.10.18_64bit/bin:$PATH
export PATH=/Users/shohei/emsdk_portable/emscripten/1.27.0:$PATH
export EMSCRIPTEN="/Users/shohei/emsdk_portable/emscripten/1.27.0"

### Virtualenvwrapper
if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
    export WORKON_HOME=$HOME/.virtualenvs
    source /usr/local/bin/virtualenvwrapper.sh
fi

export PYTHONPATH=/usr/local/lib/python2.7/site-packages

export PATH=$HOME/depot_tools:"$PATH"

export GOPATH=$HOME/gocode/

export DOCKER_TLS_VERIFY=1
export DOCKER_HOST=tcp://192.168.59.103:2376
export DOCKER_CERT_PATH=/Users/shohei/.boot2docker/certs/boot2docker-vm


alias date="gdate"
export PATH=$GOPATH/bin:$PATH

source /Users/shohei/perl5/perlbrew/etc/bashrc
alias nw="/Applications/node-webkit.app/Contents/MacOS/node-webkit"

export PATH="/Users/shohei/.cabal/bin":$PATH
# export PATH="/usr/local/ghc/bin":$PATH


export ARDUINO_DIR=/Applications/Arduino1.0.5.app/Contents/Resources/Java
export ARDMK_DIR=~/Documents/arduino-mk
export BOARDS_TXT=/Applications/Arduino1.0.5.app/Contents/Resources/Java/hardware/arduino/boards.txt
export ARDUINO_VAR_PATH=/Applications/Arduino1.0.5.app/Contents/Resources/Java/hardware/arduino/variants

# setting for peco
for f (~/.zsh/peco-sources/*) source "${f}" # load peco sources
bindkey '^r' peco-select-history
bindkey '^@' peco-cdr

function dir(){
    DIR=`ls -F| grep / | peco`
    if [ -n "$DIR" ];then
      cd $DIR
    fi
}


function peco-src () {
    local selected_dir=$(ghq list --full-path | peco --query "$LBUFFER")
    if [ -n "$selected_dir" ]; then
        BUFFER="cd ${selected_dir}"
        zle accept-line
    fi
    zle clear-screen
}
zle -N peco-src
bindkey '^]' peco-src

function subl(){
 if [ $# -ne 1 ];then
     echo "#usage: subl <file or dir>"
     return
 fi
 cmd="/Applications/Sublime\ Text.app/Contents/MacOS/Sublime\ Text "$1" &"
 eval $cmd
}

#for cabal unix-time installation: maybe bug?
# PATH=/usr/local/bin/python3:$PATH
# PATH=/usr/local/bin/python:$PATH

export GTK_PATH=/usr/local/lib/gtk-2.0

export PATH=$HOME/.local/bin:$PATH

export LIBRARY_PATH="/usr/local/Cellar/gcc/4.9.1/lib/gcc/x86_64-apple-darwin13.3.0/4.9.1/"
export PATH=$PATH:"/Applications/Julia-0.3.4.app/Contents/Resources/julia/bin"


# alias python=/usr/bin/python
# alias pip=/usr/bin/pip


#THIS MUST BE AT THE END OF THE FILE FOR GVM TO WORK!!!
[[ -s "/Users/shohei/.gvm/bin/gvm-init.sh" ]] && source "/Users/shohei/.gvm/bin/gvm-init.sh"

export DOCKER_HOST=tcp://192.168.59.104:2376
export DOCKER_CERT_PATH=/Users/shohei/.boot2docker/certs/boot2docker-vm
export DOCKER_TLS_VERIFY=1

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
export PYTHON_BUILD_CACHE_PATH=$HOME/src

function gemacs(){
    cmd="/Applications/Emacs.app/Contents/MacOS/Emacs "$@" &";
    eval $cmd;
}
#
# export NACL_SDK_ROOT=$HOME/Codes/nacl_sdk
#
